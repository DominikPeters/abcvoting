**********
Example 11
**********

------
Input:
------

profile with 8 votes and 4 candidates:
 3 x {c, d},
 2 x {a, b},
 2 x {a, c},
 1 x {b, d}

------
Rule X
------

Algorithm: Standard algorithm (using standard Python fractions)

1 winning committee:
 {a, c, d}

------
Rule X
------

Computing only one winning committee (resolute=True)

Algorithm: Standard algorithm (using standard Python fractions)

Phase 1:

starting budget:
  (3/8, 3/8, 3/8, 3/8, 3/8, 3/8, 3/8, 3/8)

adding candidate number 1: c
 with maxmimum cost per voter q = 1/5
 remaining budget:
  (7/40, 7/40, 7/40, 3/8, 3/8, 7/40, 7/40, 3/8)

adding candidate number 2: a
 with maxmimum cost per voter q = 13/40
 remaining budget:
  (7/40, 7/40, 7/40, 1/20, 1/20, 0, 0, 3/8)

Phase 2 (seq-Phragmén):

starting loads (= budget spent):
  (1/5, 1/5, 1/5, 13/40, 13/40, 3/8, 3/8, 0)

adding candidate number 3: d
 maximum load increased to 2/5
 load distribution:
  (2/5, 2/5, 2/5, 13/40, 13/40, 3/8, 3/8, 2/5)

1 winning committee:
 {a, c, d}

-----------------------------------------
Phragmén's Sequential Rule (seq-Phragmén)
-----------------------------------------

Algorithm: Standard algorithm (using standard Python fractions)

1 winning committee:
 {b, c, d}

corresponding load distribution:
(2, 1, 3): (29/60, 29/60, 29/60, 1/3, 1/3, 1/5, 1/5, 29/60)
